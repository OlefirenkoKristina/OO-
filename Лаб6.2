using System;
using System.Collections;
using System.Collections.Generic;

public class CollectionType<T> : IEnumerable<T>
{
    private List<T> _items;

    public CollectionType()
    {
        _items = new List<T>();
    }

    public CollectionType(IEnumerable<T> collection)
    {
        _items = new List<T>(collection);
    }

    public int Count => _items.Count;

    public void Add(T item)
    {
        _items.Add(item);
    }

    public bool Remove(T item)
    {
        return _items.Remove(item);
    }

    public T this[int index]
    {
        get
        {
            if (index < 0 || index >= _items.Count)
                throw new IndexOutOfRangeException("Недiйсний iндекс.");
            return _items[index];
        }
        set
        {
            if (index < 0 || index >= _items.Count)
                throw new IndexOutOfRangeException("Недiйсний iндекс.");
            _items[index] = value;
        }
    }

    public static CollectionType<T> operator +(CollectionType<T> a, CollectionType<T> b)
    {
        return new CollectionType<T>(a._items.Concat(b._items));
    }

    public bool Contains(T item)
    {
        return _items.Contains(item);
    }

    public IEnumerator<T> GetEnumerator()
    {
        return _items.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }
}
class Program
{
    static void Main()
    {
        var col1 = new CollectionType<int>();
        col1.Add(1);
        col1.Add(2);
        col1.Add(3);

        var col2 = new CollectionType<int>();
        col2.Add(4);
        col2.Add(5);

        var merged = col1 + col2;

        Console.WriteLine("Об'єднана колекцiя:");
        foreach (var item in merged)
        {
            Console.WriteLine(item);
        }

        Console.WriteLine($"Елемент за iндексом 2: {merged[2]}");
        Console.WriteLine($"Кiлькiсть елементiв: {merged.Count}");
    }
}
